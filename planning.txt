- Pull raw audio data from a .wav file

- separate data into 60hz intervals

- a new array is made where:
    - element 0 is the contactination of intervals 0 and 1 from the original array,
    - element 1 is the contactination of intervals 1 and 2,
    - etc.
    - e.g. [a, b, c] -> [ab, bc]
    - Note: the size of the new array should be one less than the original
    - numpy.concatinate() might be useful????

- filter each of the contactinated elements with a hanning window
    - This might help: https://www.geeksforgeeks.org/hanning-in-numpy-python/#
    - Some context: https://github.com/ArdenButterfield/stammer/blob/main/audio_matching.py

- FOR EACH SEGMENT:
    - use (r)fft to find the loudest frequency
        - This might help: https://realpython.com/python-scipy-fft/
    - use a bandpass filter to isolate the loudest frequency
        - This might help: https://scipy-cookbook.readthedocs.io/items/ButterworthBandpass.html
    - determine the loudness of this frequency
        - This might help: https://stackoverflow.com/questions/66138578/convert-waves-to-decibels-in-python
    - record the frequency and its loudness
    - use a notch filter to remove this frequency from the dataset
        - This might help: https://www.geeksforgeeks.org/design-an-iir-notch-filter-to-denoise-signal-using-python/#
    - repeat steps a - e until the number of desired frequencies is met

- convert the gathered frequencies into notes and detunes:
    - f = frequency; f0 = reference frequency; n is the number of semitones
    - f = f0 * 2 ^ (n / 12)
        - Source: https://www.reddit.com/r/musictheory/comments/j3q0i3/how_can_you_calculate_the_frequency_of_a_given/g7dnag5/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
    - Solving for n:
        - math.log(f/f0, 2) = n/12 * math.log(2, 2)
        - math.log(f/f0, 2) * 12 = n
        - n = 12 * math.log(f/f0, 2)
    - Pseudocode for note:
        - semitones_from_f0 = int(n)
        - f0_value = #calculate before hand; 57 for A4 (440hz) 
        - note_value = f0_value + semitones_from_f0
        - # output via note value converter
    - For E5xx, 0x00 is -1 semitone, 0x80 is base pitch, 0xFF is nearly +1 semitone.
    - Pseudocode for detune effect:
        - semitone_fraction = n % 1
        - effect_value = ((0x80 * semitone_fraction) + 0x80)
        - detune_output = "E5" + hex(effect_value)[2:4]
    

- convert loudness into something more usable
    - 7F is loudest
    - "every step is 0.75dB quieter"
        - Source: https://www.plutiedev.com/ym2612-registers#reg-40:~:text=TL%3A%20total%20level%20(every%20step%20is%200.75dB%20quieter)
    - three 7F sine waves goes over 0dB
    - one 7F sine wave is ~8.4dB (quieter than three sine waves, of course)

- Options for output:
    - Plan A >> too complicated for now:
        - write gathered data to a .fur file

    - Plan B >> more work from user, but easier to implement:
        - calculate the number of 256-row patterns needed 
            - Pseudocode: patterns = (rows // 256) + 1
        - output the data to the clipboard in chuncks of 256 rows
        - prompt the user between each clipboard dump

    - Plan C >> even more work (triple the work as B), but uses much less pattern data and allows for more track speeds:
        - E5xx value is the same value for pitch macros
        - absolute note has the same values as note converter
        - All values are directly mapped to macros (volume, absolute note, pitch)
        - calculate the number of 256-row groups needed, but output each as instrument macros 
            - Pseudocode: intruments = (rows // 256) + 1
        - calculate the number of 256-row patterns needed
            - Pseudocode: patterns = (intruments // 256) + 1
        - Note: works with Ext. channel 3 as well as normal channels

- Profit

Ideas for further development:
- use Ext. channel 3 on its own
- use Ext. channel 3 in addition to the other 4-5 default channels
- use algorithm 7 and multiplier effects to have 4 sine waves per channel for non-extended channels